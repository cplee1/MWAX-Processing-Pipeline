#!/usr/bin/env nextflow

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    MWAX-Processing-Pipeline Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

//
// Global default params
//
params {
    help = false
    examples = false

    //
    // Downloading, beamforming and post-processing pipeline ...................
    //
    
    // Observation
    obsid             = null  // ObsID of VCS observation to calibrate
    // Downloading
    skip_download     = false  // Skip downloading the data
    calids            = null   // obs IDs of calibrators
    asvo_id_obs       = null   // ASVO ID for VCS observation
    asvo_id_cals      = null   // ASCO ID for calibrator observations
    asvo_api_key      = "$MWA_ASVO_API_KEY"   // ASVO API key for recognising user
    giant_squid       = 'docker://mwatelescope/giant-squid:latest /opt/cargo/bin/giant-squid' // Path within docker image
    // Source selection
    psrs              = null   // List of pulsars to beamform on
    pointings         = null   // List of pointings to beamform
    pointings_file    = null   // File with pointings to beamform on
    // Downloading
    download          = false  // Download data first
    download_only     = false  // Download or move data then exit pipeline
    num_dl_jobs       = 1      // Number of jobs to split VCS ASVO download into
    // Calibration solution selection
    calid             = null   // ObsID of calibration observation
    use_default_sol   = false  // use calibration solution from repository
    // Beamforming options
    skip_bf           = false  // Skip beamforming and just fold
    fits              = false  // Export PSRFITS data
    vdif              = false  // Export VDIF data
    low_chan          = null   // Lowest coarse channel
    num_chan          = null   // Number of coarse channels
    duration          = null   // Observation length
    offset            = null   // Time offset from beginning of observation
    convert_rts_flags = false  // Convert tile indices to TileNames
    vcsbeam_min_walltime    = 6   // Minimum walltime in hours
    vcsbeam_mp_min_walltime = 8   // Minimum multipixel walltime in hours
    // General folding options
    force_psrcat      = false  // Force use PSRCAT ephemeris
    nbin              = 128    // Maximum bins to fold into (dspsr & prepfold)
    // DSPSR/PDMP
    fine_chan         = 16     // Number of fine channels per coarse channel (dspsr)
    tint              = 8      // Sub-integration time in seconds (dspsr)
    pdmp_mc           = 96     // Maximum number of frequency channels to use in pdmp search
    pdmp_ms           = 64     // Maximum number of sub-integrations to use in pdmp search
    nosearch_pdmp     = false  // Do not run pdmp search
    // prepfold
    nsub              = 128    // Number of sub-bands per coarse channel (prepfold)
    npart             = 64     // Number of sub-integrations to use in prepfold search
    nosearch_prepfold = false  // Do not run prepfold search
    // Acacia upload
    acacia_profile    = null
    acacia_bucket     = null
    acacia_prefix     = null

    //
    // Calibration pipeline ....................................................
    //

    // General options
    cal_joblist        = null  // List of calibration jobs
    calibrators        = null  // Comma separated list of CALID:SOURCE
    // Birli
    skip_birli         = false // Force Birli not to run
    df                 = 40    // Desired freq. resolution in kHz
    dt                 = 2     // Desired time resolution in seconds
    // Hyperdrive di-calibrate
    flagged_tiles      = ''           // Space separated list of tiles to flag
    flagged_fine_chans = '0 1 30 31'  // Space separated list of fine channels to flag per coarse channel
}

def hostname = 'hostname'.execute().text.trim().replace("-", "")
if ( hostname.startsWith('garrawarla') ) {
    // Default file paths
    includeConfig 'conf/pawsey.config'
    // Cluster-specific resource allocation
    includeConfig 'conf/garrawarla.config'
} else {
    System.err.println("ERROR: Pipeline must be executed on Garrawarla.")
    exit(1)
}

profiles {
    msp_census_default {
        params {
            low_chan = 109
            num_chan = 24
            fits     = true
            vdif     = true
            nbin     = 64
        }
    }
    msp_census_highres {
        params {
            low_chan = 109
            num_chan = 24
            fits     = false
            vdif     = true
            nbin     = 256
        }
    }
    nulling_census {
        params {
            low_chan = 109
            num_chan = 24
            fits     = true
            vdif     = false
            nbin     = 128
        }
    }
    smart_census {
        params {
            low_chan     = 109
            num_chan     = 24
            fits         = true
            vdif         = false
            nbin         = 1024
            force_psrcat = true
        }
    }
}