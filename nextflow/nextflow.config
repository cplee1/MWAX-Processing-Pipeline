#!/usr/bin/env nextflow

// ------------------------------- GENERAL CONFIG ------------------------------
// Directory where intermediate pipeline products will be written
if ( "$USER" == 'cplee' ) {
    workDir = '/astro/mwavcs/cplee/work_dirs/mwax_quicklook_work'
} else {
    workDir = "/astro/mwavcs/$USER/mwax_processing_work"
}

// ------------------------------- PIPELINE CONFIG -----------------------------
params {
    // SOFTWARE VERSIONS
    // ~~~~~~~~~~~~~~~~~
    vcsbeam_version     = 'v4.2'
    hyperdrive_version  = 'peel'
    birli_version       = 'v0.10.0'

    // DIRECTORIES
    // ~~~~~~~~~~~
    // Directory containing downloaded VCS data organised by ObsIDs
    if ( "$USER" == 'cplee' ) {
        vcs_dir = '/astro/mwavcs/cplee/vcs_downloads'
    } else {
        vcs_dir = "/astro/mwavcs/$USER"
    }
    // Directory where ASVO places downloaded data
    asvo_dir       = '/astro/mwavcs/asvo'
    // Location of required modules
    module_dir     = '/pawsey/mwa/software/python3/modulefiles'
    // Location of singularity
    container_dir  = '/pawsey/mwa/singularity'
    // Directory containing pulsar ephemerides (takes preference over PSRCAT)
    ephemeris_dir  = '/astro/mwavcs/cplee/remote_backup/meerkat_ephemerides'

    // MWAX_DOWNLOAD
    // ~~~~~~~~~~~~~
    asvo_id_obs   = ''     // ASVO ID for VCS observation
    asvo_id_cals  = ''     // ASCO ID for calibrator observations
    force_birli   = false  // Force Birli to be run

    // MWAX_CALIBRATE
    // ~~~~~~~~~~~~~~
    obsid            = ''  // ObsID of VCS observation to calibrate
    calibrators      = ''  // Comma separated list of CALID:SOURCE
    // Birli options
    df               = 40  // Desired freq. resolution in kHz
    dt               = 2   // Desired time resolution in seconds
    flag_edge_chans  = 0   // Fine channels to flag on the coarse channel edges
    // Hyperdrive options
    flagged_tiles    = ''  // Comma separated list of tiles to flag

    // MWAX_BEAMFORM
    // ~~~~~~~~~~~~~
    skip_bf     = false       // Skip beamforming and just fold
    // VCSBeam options
    fits        = false       // Export PSRFITS data
    vdif        = false       // Export VDIF data
    low_chan    = 109         // Lowest coarse channel
    num_chan    = 24          // Number of coarse channels
    duration    = 592         // Observation length
    begin       = ''          // Start GPS time
    psrs        = ''          // List of pulsars to beamform on
    calid       = ''          // ObsID of calibration observation
    // dspsr and prepfold options
    nbin        = 128         // Maximum bins to fold into
    // dspsr options
    fine_chan   = 32          // Number of fine channels per coarse channel
    tint        = 8           // Sub-integration time in seconds
    // prepfold options
    nsub        = 192         // Number of sub-bands to use in search
    npart       = 256         // Number of sub-integrations to use in search
}

// ------------------------------- RESOURCE SETUP ------------------------------
process.module = 'singularity/3.7.4'
singularity {
    enabled = true
    // runOptions = '--nv -B /nvmetmp'
    envWhitelist = 'SINGULARITY_BINDPATH, SINGULARITYENV_LD_LIBRARY_PATH'
}

process {
    cache = 'lenient'

    withLabel: 'gpu|cpu' {
        executor = 'slurm'
        cpus = 4
        memory = 60.GB
    }
    withLabel: gpu {
        queue   = 'gpuq'
    }
    withLabel: cpu {
        queue   = 'workq'
    }
    withLabel: birli {
        cpus = 36
        memory = 370.GB
        scratch = '/nvmetmp'
        beforeScript = "module use ${params.module_dir}; module load birli/${params.birli_version}"
        clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --tmp=440G --export=NONE" }
    }
    withLabel: hyperdrive {
        scratch = 'ram-disk'
        beforeScript = "module use ${params.module_dir}; module load hyperdrive/${params.hyperdrive_version}"
        clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --gres=tmp:50g,gpu:1 --export=NONE" }
    }
    withLabel: vcsbeam {
        cpus = 1
        beforeScript = "module use ${params.module_dir}; module load vcsbeam/${params.vcsbeam_version}"
        clusterOptions = { "--nodes=${params.num_chan} --cpus-per-task=${task.cpus} --ntasks-per-node=1 --gres=gpu:1 --export=NONE" }
    }
    withLabel: psranalysis {
        container = "file:///${params.container_dir}/psr-analysis/psr-analysis.sif"
    }
    withLabel: psrsearch {
        container = "file:///${params.container_dir}/psr-search/psr-search.sif"
    }
    withLabel: dspsr {
        clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --ntasks-per-node=1 --export=NONE" }
    }
    withLabel: prepfold {
        clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --ntasks-per-node=1 --export=NONE" }
    }
}