#!/usr/bin/env nextflow

// ------------------------------- GENERAL CONFIG ------------------------------
// Directory where intermediate pipeline products will be written
if ( "$USER" == 'cplee' ) {
    workDir = '/astro/mwavcs/cplee/work_dirs/mwax_quicklook_work'
} else {
    workDir = "/astro/mwavcs/$USER/mwax_processing_work"
}

// ------------------------------- PIPELINE CONFIG -----------------------------
params {
    help = false
    
    // SOFTWARE VERSIONS
    // ~~~~~~~~~~~~~~~~~
    vcsbeam_version     = 'v4.2'
    hyperdrive_version  = 'v0.3.0'
    birli_version       = 'v0.10.0'

    // DIRECTORIES
    // ~~~~~~~~~~~
    // Directory containing downloaded VCS data organised by ObsIDs
    if ( "$USER" == 'cplee' ) {
        vcs_dir = '/astro/mwavcs/cplee/vcs_downloads'
    } else {
        vcs_dir = "/astro/mwavcs/$USER"
    }
    // Directory where ASVO places downloaded data
    asvo_dir       = '/astro/mwavcs/asvo'
    // Location of required modules
    module_dir     = '/pawsey/mwa/software/python3/modulefiles'
    // Location of singularity
    container_dir  = '/pawsey/mwa/singularity'
    // Directory containing pulsar ephemerides (takes preference over PSRCAT)
    ephemeris_dir  = '/astro/mwavcs/cplee/remote_backup/meerkat_ephemerides'

    // MWAX_DOWNLOAD
    // ~~~~~~~~~~~~~
    asvo_id_obs   = ''     // ASVO ID for VCS observation
    asvo_id_cals  = ''     // ASCO ID for calibrator observations

    // MWAX_CALIBRATE
    // ~~~~~~~~~~~~~~
    obsid            = ''  // ObsID of VCS observation to calibrate
    calibrators      = ''  // Comma separated list of CALID:SOURCE
    // Birli options
    force_birli      = false  // Force Birli to be run
    skip_birli       = false  // Force Birli to not run
    df               = 40  // Desired freq. resolution in kHz
    dt               = 2   // Desired time resolution in seconds
    // Hyperdrive options
    flagged_tiles      = ''           // Space separated list of tiles to flag
    flagged_fine_chans = '0 1 30 31'  // Space separated list of fine channels to flag per coarse channel
    models_dir         = '/pawsey/mwa/software/python3/mwa-reduce/mwa-reduce-git/models'
    src_catalogue      = '/astro/mwavcs/cplee/remote_backup/source_lists/GGSM_updated.txt'

    // MWAX_BEAMFORM
    // ~~~~~~~~~~~~~
    skip_bf           = false    // Skip beamforming and just fold
    // VCSBeam options
    fits              = false    // Export PSRFITS data
    vdif              = false    // Export VDIF data
    low_chan          = 109      // Lowest coarse channel
    num_chan          = 24       // Number of coarse channels
    duration          = ''       // Observation length
    begin             = ''       // Start GPS time
    calid             = ''       // ObsID of calibration observation
    psrs              = null     // List of pulsars to beamform on
    pointings         = null     // List of pointings to beamform
    pointings_file    = null     // File with pointings to beamform on
    convert_rts_flags = false    // Convert tile indices to TileNames
    convert_flags_script = '/astro/mwavcs/cplee/github/vcsbeam/utils/rts_flag_ant_to_tilenames.py' // Temporary while not in VCSBeam module
    // Folding and dedispersion options
    nbin        = 128         // Maximum bins to fold into (dspsr & prepfold)
    fine_chan   = 32          // Number of fine channels per coarse channel (dspsr)
    tint        = 8           // Sub-integration time in seconds (dspsr)
    // Search options
    nosearch_prepfold   = false  // Do not run prepfold search
    nosearch_pdmp       = false  // Do not run pdmp search
    nsub                = 192    // Number of sub-bands to use in prepfold search
    npart               = 256    // Number of sub-integrations to use in prepfold search
    pdmp_mc             = 192    // Maximum number of frequency channels to use in pdmp search
    pdmp_ms             = 256    // Maximum number of sub-integrations to use in pdmp search
}

// ------------------------------- RESOURCE SETUP ------------------------------
process.module = 'singularity/3.7.4'
singularity {
    enabled = true
    // runOptions = '--nv -B /nvmetmp'
    envWhitelist = 'SINGULARITY_BINDPATH, SINGULARITYENV_LD_LIBRARY_PATH'
}

process {
    cache = 'lenient'

    withLabel: 'gpu|cpu' {
        executor = 'slurm'
        // By default use about 1/6 of a node
        cpus = 6
        memory = 60.GB
    }
    withLabel: gpu {
        queue   = 'gpuq'
    }
    withLabel: cpu {
        queue   = 'workq'
    }
    withLabel: birli {
        cpus = 36
        memory = 370.GB
        scratch = '/nvmetmp'
        beforeScript = "module use ${params.module_dir}; module load birli/${params.birli_version}"
        clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --tmp=440G --export=NONE" }
    }
    withLabel: hyperdrive {
        scratch = 'ram-disk'
        beforeScript = "module use ${params.module_dir}; module load hyperdrive/${params.hyperdrive_version}"
        clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --gres=tmp:50g,gpu:1 --export=NONE" }
    }
    withLabel: vcsbeam {
        beforeScript = "module use ${params.module_dir}; module load vcsbeam/${params.vcsbeam_version}"
        clusterOptions = { "--nodes=${params.num_chan} --cpus-per-task=${task.cpus} --ntasks-per-node=1 --gres=gpu:1 --export=NONE" }
    }
    withLabel: psranalysis {
        container = "file:///${params.container_dir}/psr-analysis/psr-analysis.sif"
    }
    withLabel: psrsearch {
        container = "file:///${params.container_dir}/psr-search/psr-search.sif"
    }
    withLabel: dspsr {
        clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --ntasks-per-node=1 --export=NONE" }
    }
    withLabel: prepfold {
        clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --ntasks-per-node=1 --export=NONE" }
    }
}